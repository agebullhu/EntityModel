<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Agebull.EntityModel.MySql</name>
    </assembly>
    <members>
        <member name="T:Agebull.EntityModel.MySql.ConnectionScope">
            <summary>
            数据库连接范围
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.ConnectionScope.Transaction">
            <summary>
                事务对象
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ConnectionScope.System#IAsyncDisposable#DisposeAsync">
            <summary>
                清理资源
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ConnectionScope.Dispose">
            <summary>
            析构
            </summary>
        </member>
        <member name="T:Agebull.EntityModel.MySql.MySqlConnectionsManager">
            <summary>
            连接管理
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlConnectionsManager.Instance">
            <summary>
            单例
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlConnectionsManager.InternalInitialize">
            <summary>
                内部初始化
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlConnectionsManager.GetConnection(System.String)">
            <summary>
            取得一个空闲连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlConnectionsManager.Close(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            关闭连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlConnectionsManager.InitConnection(System.String)">
            <summary>
            初始化连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlConnectionsManager.CloseConnection(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            关闭连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Agebull.EntityModel.MySql.MySqlDataAccess`2">
            <summary>
                Sql实体访问类
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TMySqlDataBase">所在的数据库对象,可通过Ioc自动构造</typeparam>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataAccess`2.SqlBuilder">
            <summary>
            Sql语句构造器
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataAccess`2.DataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataAccess`2.CreateDataBase">
            <summary>
            自动构建数据库对象
            </summary>
        </member>
        <member name="T:Agebull.EntityModel.MySql.MySqlSqlBuilder`1">
            <summary>
                Sql实体访问类
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.DataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder{TEntity}#Option">
            <summary>
            Sql对应的配置信息
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Option">
            <summary>
            Sql对应的配置信息
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.GetModifiedUpdateSql(Agebull.EntityModel.Common.EditDataObject)">
            <summary>
            取得仅更新的SQL语句
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.GetFullUpdateSql(Agebull.EntityModel.Common.EditDataObject)">
            <summary>
            取得仅更新的SQL语句
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.FileUpdateSql(System.String,System.Object,System.Collections.Generic.IList{System.Data.Common.DbParameter})">
            <summary>
                生成单个字段更新的SQL
            </summary>
            <param name="field">字段</param>
            <param name="value">值</param>
            <param name="parameters">参数列表</param>
            <returns>单个字段更新的SQL</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreateUpdateSql(System.String,System.String)">
            <summary>
                生成更新的SQL
            </summary>
            <param name="valueExpression">更新表达式(SQL)</param>
            <param name="condition">更新条件</param>
            <returns>更新的SQL</returns>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.FullLoadSqlCode">
            <summary>
                删除的SQL语句
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.PrimaryKeyConditionSQL">
            <summary>
                主键的条件部分SQL
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.InjectionCondition(System.String)">
            <summary>
                得到可正确拼接的SQL条件语句（可能是没有）
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreateCollectSql(System.String,System.String,System.String)">
            <summary>
                生成汇总的SQL语句
            </summary>
            <param name="fun">汇总函数名称</param>
            <param name="field">汇总字段</param>
            <param name="condition">汇总条件</param>
            <returns>汇总的SQL语句</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreateLoadValueSql(System.String,System.String)">
            <summary>
                生成载入字段值的SQL语句
            </summary>
            <param name="field">字段</param>
            <param name="condition">条件</param>
            <returns>载入字段值的SQL语句</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreateLoadValuesSql(System.String,Agebull.EntityModel.Common.ConditionItem)">
            <summary>
                生成载入值的SQL
            </summary>
            <param name="field">字段</param>
            <param name="convert">条件</param>
            <returns>载入字段值的SQL语句</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreateLoadSql(System.String,System.String)">
            <summary>
                生成载入的SQL语句
            </summary>
            <param name="condition">数据条件</param>
            <param name="order">排序字段</param>
            <returns>载入的SQL语句</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreatePageSql(System.Int32,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
                生成分页的SQL
            </summary>
            <param name="page">页号</param>
            <param name="pageSize">每页几行(强制大于0,小于500行)</param>
            <param name="order">排序字段</param>
            <param name="desc">是否倒序</param>
            <param name="condition">数据条件</param>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreateDeleteSql(System.String)">
            <summary>
                生成删除的SQL语句
            </summary>
            <param name="condition">删除条件</param>
            <returns>删除的SQL语句</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreateDeleteSql(Agebull.EntityModel.Common.ConditionItem)">
            <summary>
                生成删除的SQL语句
            </summary>
            <param name="convert">删除条件</param>
            <returns>删除的SQL语句</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.PhysicalDeleteSql(System.String)">
            <summary>
                物理删除数据
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.FieldConditionSQL(System.String,System.String)">
            <summary>
                用在条件中的字段条件
            </summary>
            <param name="field">字段</param>
            <param name="expression">条件表达式</param>
            <returns>字段条件</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.JoinConditionSQL(System.Boolean,System.String[])">
            <summary>
                组合条件SQL
            </summary>
            <param name="isAnd">是否用AND组合</param>
            <param name="conditions">条件</param>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.FieldConditionSQL(System.Boolean,System.String[])">
            <summary>
                连接字段条件SQL
            </summary>
            <param name="isAnd">是否用AND组合</param>
            <param name="fields">生成参数的字段</param>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.FieldConditionSQL(System.Boolean,System.ValueTuple{System.String,System.Object}[])">
            <summary>
                连接字段条件SQL
            </summary>
            <param name="isAnd">是否用AND组合</param>
            <param name="fields">生成参数的字段</param>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder{TEntity}#GetDbType(System.String)">
            <summary>
                得到字段的MySqlDbType类型
            </summary>
            <param name="field">字段名称</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreateFieldParameter(System.String)">
            <summary>
                生成字段的参数
            </summary>
            <param name="field">生成参数的字段</param>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreateFieldParameter(System.String,Agebull.EntityModel.Common.EditDataObject)">
            <summary>
                生成字段的参数
            </summary>
            <param name="field">生成参数的字段</param>
            <param name="entity">取值的实体</param>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreatePimaryKeyParameter">
            <summary>
                生成主键字段的参数
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreatePimaryKeyParameter(System.Object)">
            <summary>
                生成主键字段的参数
            </summary>
            <param name="value">主键值</param>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreatePimaryKeyParameter(Agebull.EntityModel.Common.EditDataObject)">
            <summary>
                生成主键字段的参数
            </summary>
            <param name="entity">取值的实体</param>
        </member>
        <member name="T:Agebull.EntityModel.MySql.ParameterCreater">
            <summary>
                Sql实体访问类
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.CreateFieldParameter(System.String,System.Int32,System.Object)">
            <summary>
                生成字段的参数
            </summary>
            <param name="field">生成参数的字段</param>
            <param name="dbType"></param>
            <param name="value">值</param>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.CreateParameter(System.String,System.String,System.Object)">
            <summary>
                生成Sql参数
            </summary>
            <param name="csharpType">C#的类型</param>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.Agebull#EntityModel#Common#IParameterCreater#CreateParameter(System.String,System.Object,System.Int32)">
            <summary>
                生成Sql参数
            </summary>
            <param name="dbType">对应数据库的DbType，如MysqlDbType</param>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.CreateParameter(System.String,System.Object,MySql.Data.MySqlClient.MySqlDbType)">
            <summary>
                生成Sql参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <param name="type">类型</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.CreateParameter(System.String,System.Object)">
            <summary>
                生成Sql参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.CreateParameter(System.String,System.String)">
            <summary>
                生成Sql参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.CreateParameter(System.String,System.Boolean)">
            <summary>
                生成Sql参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.CreateParameter``1(System.String,``0)">
            <summary>
                生成Sql参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.ToSqlDbType(System.String)">
            <summary>
                从C#的类型转为DBType
            </summary>
            <param name="csharpType"> </param>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.ToDbType(System.String)">
            <summary>
                从C#的类型转为DBType
            </summary>
            <param name="csharpType"> </param>
        </member>
        <member name="T:Agebull.EntityModel.MySql.PredicateConvert">
            <summary>
                用于MySql的Lambda表达式解析器(仅支持查询条件)
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.MySql.PredicateConvert._columnMap">
            <summary>
                关联字段
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.MySql.PredicateConvert._condition">
            <summary>
                结果条件节点
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.MySql.PredicateConvert._mergeByAnd">
            <summary>
                与上一次解释的条件用AND方式组合(否则为OR组合)
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.PredicateConvert.ParameterCreater">
            <summary>
            具体数据库对象
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.#ctor(Agebull.EntityModel.Common.IParameterCreater,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                构造
            </summary>
            <param name="map">关联字段</param>
            <param name="parameter">关联字段</param>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.GetName(System.Linq.Expressions.MemberExpression)">
            <summary>
                取得名称
            </summary>
            <param name="expression">字段或属性对象</param>
            <returns>名称</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.GetValue(System.Linq.Expressions.Expression)">
            <summary>
                取得值
            </summary>
            <param name="expression">Lambda节点对象</param>
            <returns>计算结果值</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert``1(Agebull.EntityModel.Common.IParameterCreater,System.String[],System.Linq.Expressions.Expression{``0})">
            <summary>
                分析Lambda表达式
            </summary>
            <typeparam name="T">方法类型</typeparam>
            <param name="parameter"></param>
            <param name="columns">关联字段</param>
            <param name="predicate">Lambda表达式</param>
            <returns>结果条件对象(SQL条件和参数)</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert``1(Agebull.EntityModel.Common.IParameterCreater,System.Collections.Generic.Dictionary{System.String,System.String},System.Linq.Expressions.Expression{``0})">
            <summary>
                分析Lambda表达式
            </summary>
            <typeparam name="T">方法类型</typeparam>
            <param name="parameter"></param>
            <param name="map">关联字段</param>
            <param name="predicate">Lambda表达式</param>
            <returns>结果条件对象(SQL条件和参数)</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert``1(Agebull.EntityModel.Common.IParameterCreater,System.Collections.Generic.Dictionary{System.String,System.String},System.Linq.Expressions.Expression{``0},Agebull.EntityModel.Common.ConditionItem,System.Boolean)">
            <summary>
                分析Lambda表达式
            </summary>
            <typeparam name="T">方法类型</typeparam>
            <param name="parameter"></param>
            <param name="map">关联字段</param>
            <param name="predicate">Lambda表达式</param>
            <param name="condition">之前已解析的条件,可为空</param>
            <param name="mergeByAnd">与前面的条件(condition中已存在的)是用与还是或组合</param>
            <returns>结果条件对象(SQL条件和参数)</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert2``1(Agebull.EntityModel.Common.IParameterCreater,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Agebull.EntityModel.Common.ConditionItem,System.Boolean)">
            <summary>
                分析Lambda表达式
            </summary>
            <typeparam name="T">方法类型</typeparam>
            <param name="parameter"></param>
            <param name="columns">关联字段</param>
            <param name="predicate">Lambda表达式</param>
            <param name="condition">之前已解析的条件,可为空</param>
            <param name="mergeByAnd">与前面的条件(condition中已存在的)是用与还是或组合</param>
            <returns>结果条件对象(SQL条件和参数)</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert``1(Agebull.EntityModel.Common.IParameterCreater,System.Collections.Generic.Dictionary{System.String,System.String},Agebull.EntityModel.Common.LambdaItem{``0})">
            <summary>
                分析Lambda表达式
            </summary>
            <typeparam name="T">方法类型</typeparam>
            <param name="parameter"></param>
            <param name="map">关联字段</param>
            <param name="filter">Lambda表达式</param>
            <returns>结果条件对象(SQL条件和参数)</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert``1(Agebull.EntityModel.Common.IParameterCreater,System.Collections.Generic.Dictionary{System.String,System.String},Agebull.EntityModel.Common.LambdaItem{``0},Agebull.EntityModel.Common.ConditionItem,System.Boolean)">
            <summary>
                分析Lambda表达式
            </summary>
            <typeparam name="T">方法类型</typeparam>
            <param name="parameter"></param>
            <param name="map">关联字段</param>
            <param name="filter">Lambda表达式</param>
            <param name="condition">之前已解析的条件,可为空</param>
            <param name="mergeByAnd">与前面的条件(condition中已存在的)是用与还是或组合</param>
            <returns>结果条件对象(SQL条件和参数)</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert``1(System.Linq.Expressions.Expression{``0})">
            <summary>
                分析Lambda表达式
            </summary>
            <typeparam name="T">方法类型</typeparam>
            <param name="predicate">Lambda表达式</param>
            <returns>结果条件对象(SQL条件和参数)</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.CheckSingle(System.String)">
            <summary>
                不成文的表达式处理
            </summary>
            <param name="str">有可能不合格的SQL文本</param>
            <returns>正确合格的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.ConvertExpression(System.Linq.Expressions.Expression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert(System.Linq.Expressions.BinaryExpression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">二元Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.GetArguments(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                取得方法对象的参数
            </summary>
            <param name="expression">方法Lambda对象</param>
            <returns>参数文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert(System.Linq.Expressions.UnaryExpression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">一元Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">方法Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert(System.Linq.Expressions.MemberExpression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">属性或字段Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert(System.Linq.Expressions.ConstantExpression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">常量Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="T:Agebull.EntityModel.MySql.MySqlDataBase">
            <summary>
                表示MySql数据库对象
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataBase.DataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataBase.DataBaseName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataBase.Transaction">
            <summary>
                事务对象
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataBase.Agebull#EntityModel#Common#IDataBase#Transaction">
            <inheritdoc />
            <summary>
                事务对象
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.BeginTransaction">
            <summary>
            开始一个事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.Agebull#EntityModel#Common#IDataBase#Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.Agebull#EntityModel#Common#IDataBase#Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataBase.ConnectionStringName">
            <summary>
            连接字符串配置节点名称,用于取出
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataBase.IsLockConnection">
            <summary>
            是否锁定连接对象(更新插入删除发生后自动启用)
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.DisposeAsync">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.DoDispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.OpenAsync">
            <summary>
                打开连接
            </summary>
            <returns>是否打开,是则为此时打开,否则为之前已打开</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.ExecuteAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
                对连接执行 Transact-SQL 语句并返回受影响的行数。
            </summary>
            <param name="sql">SQL语句</param>
            <param name="args">参数</param>
            <returns>被影响的行数</returns>
            <remarks>
                注意,如果有参数时,都是匿名参数,请使用?序号的形式访问参数
            </remarks>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.ExecuteAsync(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
                执行SQL
            </summary>
            <param name="sql">SQL语句</param>
            <param name="args">参数</param>
            <returns>被影响的行数</returns>
            <remarks>
                注意,如果有参数时,都是匿名参数,请使用?序号的形式访问参数
            </remarks>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.ExecuteScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
                执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="sql">SQL语句</param>
            <param name="args">参数</param>
            <returns>操作的第一行第一列或空</returns>
            <remarks>
                注意,如果有参数时,都是匿名参数,请使用?的形式访问参数
            </remarks>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.ExecuteScalarAsync``1(System.String)">
            <summary>
                执行SQL
            </summary>
            <param name="sql">SQL语句</param>
            <returns>操作的第一行第一列或空</returns>
            <remarks>
                注意,如果有参数时,都是匿名参数,请使用?的形式访问参数
            </remarks>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.ExecuteScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
                执行SQL
            </summary>
            <param name="sql">SQL语句</param>
            <param name="args">参数</param>
            <returns>操作的第一行第一列或空</returns>
            <remarks>
                注意,如果有参数时,都是匿名参数,请使用?的形式访问参数
            </remarks>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.Agebull#EntityModel#Common#IDataBase#CreateConnectionScope">
            <summary>
            构造连接范围对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.CreateCommand(Agebull.EntityModel.Common.IConnectionScope,System.Data.Common.DbParameter[])">
            <summary>
                生成命令
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.CreateCommand(Agebull.EntityModel.Common.IConnectionScope,System.String,System.Data.Common.DbParameter)">
            <summary>
                生成命令
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.CreateCommand(Agebull.EntityModel.Common.IConnectionScope)">
            <summary>
                生成命令
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.CreateCommand(Agebull.EntityModel.Common.IConnectionScope,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
                生成命令
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.TraceSql(System.Data.Common.DbCommand)">
            <summary>
                记录SQL日志
            </summary>
            <returns>操作的第一行第一列或空</returns>
            <remarks>
                注意,如果有参数时,都是匿名参数,请使用?的形式访问参数
            </remarks>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.TraceSql(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
                记录SQL日志
            </summary>
            <param name="sql">SQL语句</param>
            <param name="args">参数</param>
            <returns>操作的第一行第一列或空</returns>
            <remarks>
                注意,如果有参数时,都是匿名参数,请使用?的形式访问参数
            </remarks>
        </member>
        <member name="T:Agebull.EntityModel.MySql.AutoRegister">
            <summary>
              组件注册
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.AutoRegister.ZeroTeam#MessageMVC#AddIn#IAutoRegister#AutoRegist(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册
            </summary>
        </member>
    </members>
</doc>
