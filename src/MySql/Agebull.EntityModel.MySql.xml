<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Agebull.EntityModel.MySql</name>
    </assembly>
    <members>
        <member name="T:Agebull.EntityModel.MySql.ConnectionScope">
            <summary>
            数据库连接范围
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.MySql.ConnectionScope._isHereOpen">
            <summary>
                是否此处打开数据库
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ConnectionScope.DisposeAsync">
            <summary>
                清理资源
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ConnectionScope.CreateCommand(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
                生成命令
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ConnectionScope.BeginTransaction">
            <summary>
            开始一个事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ConnectionScope.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ConnectionScope.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="T:Agebull.EntityModel.MySql.MySqlDataBase">
            <summary>
                表示MySql数据库对象
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataBase.DataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataBase.DataBaseName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataBase.TransactionSuccess">
            <summary>
                事务成功
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataBase.Transaction">
            <summary>
                事务对象
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.CreateConnectionScope">
            <summary>
            构造连接范围对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataBase.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.MySql.MySqlDataBase._connection">
            <summary>
            连接对象
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.OpenAsync">
            <summary>
                打开连接
            </summary>
            <returns>是否打开,是则为此时打开,否则为之前已打开</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.CloseAsync">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.OpenConnection(System.String)">
            <summary>
            初始化连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.CloseConnection(MySqlConnector.MySqlConnection)">
            <summary>
            关闭连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.DisposeAsync">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.ExecuteAsync(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
                对连接执行SQL 语句并返回受影响的行数。
            </summary>
            <param name="sql">SQL语句</param>
            <param name="args">参数</param>
            <returns>被影响的行数</returns>
            <remarks>
                注意,如果有参数时,都是匿名参数,请使用?序号的形式访问参数
            </remarks>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.ExecuteScalarAsync(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
                执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>操作的第一行第一列或空</returns>
            <remarks>
                注意,如果有参数时,都是匿名参数,请使用?的形式访问参数
            </remarks>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlDataBase.Logger">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlDataBase.TraceSql(System.Data.Common.DbCommand)">
            <summary>
                记录SQL日志
            </summary>
            <returns>操作的第一行第一列或空</returns>
            <remarks>
                注意,如果有参数时,都是匿名参数,请使用?的形式访问参数
            </remarks>
        </member>
        <member name="T:Agebull.EntityModel.MySql.MySqlSqlBuilder`1">
            <summary>
                MySql的SQL语句生成
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#DataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Option">
            <summary>
            Sql语句构造器
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.SqlBuilder">
            <summary>
            Sql语句构造器
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Provider">
            <summary>
            驱动提供者信息
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.FroeachDbProperties(Agebull.EntityModel.Common.ReadWriteFeatrue,System.Action{Agebull.EntityModel.Common.EntityProperty})">
            <summary>
            迭代循环属性
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#BuilderLoadFields">
            <summary>
            读取的字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#BuilderUpdateFields">
            <summary>
            全量更新的字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#BuilderUpdateCode(System.String,System.String)">
            <summary>
                生成更新的SQL
            </summary>
            <param name="valueExpression">更新表达式(SQL)</param>
            <param name="condition">更新条件</param>
            <returns>更新的SQL</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#BuilderInsertSqlCode">
            <summary>
            插入的代码(BUG)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#BuilderDeleteSqlCode">
            <summary>
            删除的代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#FieldUpdateSetCode(System.String,System.Object,System.Collections.Generic.IList{System.Data.Common.DbParameter})">
            <summary>
                生成单个字段更新的SQL
            </summary>
            <param name="field">字段</param>
            <param name="value">值</param>
            <param name="parameters">参数列表</param>
            <returns>单个字段更新的SQL</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#FieldAddCode(System.String,System.Object,System.Collections.Generic.IList{System.Data.Common.DbParameter})">
            <summary>
            字段累加更新
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#CreateUpdateSqlCode(System.String,System.String)">
            <summary>
                生成更新的SQL
            </summary>
            <param name="valueExpression">更新表达式(SQL)</param>
            <param name="condition">更新条件</param>
            <returns>更新的SQL</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#CreateInsertSqlCode">
            <summary>
                生成更新的SQL
            </summary>
            <returns>更新的SQL</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder{TEntity}#CreateUpdateSqlCode(`0,System.String)">
            <summary>
                生成更新的SQL
            </summary>
            <param name="entity">实体</param>
            <param name="condition">更新条件</param>
            <returns>更新的SQL</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#CreateCollectSql(System.String,System.String,System.String)">
            <summary>
                生成汇总的SQL语句
            </summary>
            <param name="fun">汇总函数名称</param>
            <param name="field">汇总字段</param>
            <param name="condition">汇总条件</param>
            <returns>汇总的SQL语句</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.CreateLoadSql(System.String,System.String,System.String,System.String)">
            <summary>
                生成载入字段值的SQL语句
            </summary>
            <param name="fields">字段</param>
            <param name="condition">条件</param>
            <param name="orderSql">排序片断</param>
            <param name="limit"></param>
            <returns>载入字段值的SQL语句</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#CreateFullLoadSql(System.String,System.String,System.String,System.String)">
            <summary>
                生成载入字段值的SQL语句
            </summary>
            <param name="fields">字段</param>
            <param name="condition">条件</param>
            <param name="orderSql">排序片断</param>
            <param name="limit"></param>
            <returns>载入字段值的SQL语句</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#CreateSingleLoadSql(System.String,System.String,System.String,System.String)">
            <summary>
                生成载入字段值的SQL语句
            </summary>
            <param name="field">字段</param>
            <param name="condition">条件</param>
            <param name="orderSql">排序片断</param>
            <param name="limit"></param>
            <returns>载入字段值的SQL语句</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.InjectionLoadCondition(System.String)">
            <summary>
                查询条件注入
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.InjectionLoadCondition(System.Text.StringBuilder,System.String)">
            <summary>
                查询条件注入
            </summary>
            <param name="code"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#CreateDeleteSql(System.String)">
            <summary>
                生成删除的SQL语句
            </summary>
            <param name="condition">删除条件</param>
            <returns>删除的SQL语句</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#PhysicalDeleteSqlCode(System.String)">
            <summary>
                物理删除数据
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Agebull#EntityModel#Common#ISqlBuilder#PrimaryKeyCondition">
            <summary>
                主键的条件部分SQL
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.OrderCode(System.String,System.Boolean)">
            <summary>
            构建排序SQL片断
            </summary>
            <param name="field"></param>
            <param name="asc"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.OrderCode(System.String[])">
            <summary>
            构建排序SQL片断
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Compile(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc/>
        </member>
        <member name="M:Agebull.EntityModel.MySql.MySqlSqlBuilder`1.Compile(Agebull.EntityModel.Common.LambdaItem{`0})">
            <inheritdoc/>
        </member>
        <member name="T:Agebull.EntityModel.MySql.ParameterCreater">
            <summary>
                Sql实体访问类
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.CreateParameter(System.String,System.String,System.Object)">
            <summary>
                生成Sql参数
            </summary>
            <param name="csharpType">C#的类型</param>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.Agebull#EntityModel#Common#IParameterCreater#CreateParameter(System.String,System.Object,System.Int32)">
            <summary>
                生成Sql参数
            </summary>
            <param name="dbType">对应数据库的DbType，如MysqlDbType</param>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.CreateParameter(System.String,System.Object,MySqlConnector.MySqlDbType)">
            <summary>
                生成Sql参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <param name="type">类型</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.Agebull#EntityModel#Common#IParameterCreater#CreateParameter(System.String,System.Int32)">
            <summary>
                生成Sql参数
            </summary>
            <param name="parameterName">参数</param>
            <param name="dbType">对应数据库的DbType，如MysqlDbType</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.CreateParameter(System.String,System.String)">
            <summary>
                生成Sql参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.CreateParameter(System.String,System.Boolean)">
            <summary>
                生成Sql参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.CreateParameter``1(System.String,``0)">
            <summary>
                生成Sql参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <returns>参数</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.ToSqlDbType(System.String)">
            <summary>
                从C#的类型转为DBType
            </summary>
            <param name="csharpType"> </param>
        </member>
        <member name="M:Agebull.EntityModel.MySql.ParameterCreater.ToDbType(System.String)">
            <summary>
                从C#的类型转为DBType
            </summary>
            <param name="csharpType"> </param>
        </member>
        <member name="T:Agebull.EntityModel.MySql.PredicateConvert">
            <summary>
                用于MySql的Lambda表达式解析器(仅支持查询条件)
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.MySql.PredicateConvert._option">
            <summary>
                关联字段
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.MySql.PredicateConvert._condition">
            <summary>
                结果条件节点
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.MySql.PredicateConvert._mergeByAnd">
            <summary>
                与上一次解释的条件用AND方式组合(否则为OR组合)
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert``1(Agebull.EntityModel.Common.IParameterCreater,Agebull.EntityModel.Common.DataAccessOption,System.Linq.Expressions.Expression{``0})">
            <summary>
                分析Lambda表达式
            </summary>
            <typeparam name="T">方法类型</typeparam>
            <param name="parameter"></param>
            <param name="option">设置</param>
            <param name="predicate">Lambda表达式</param>
            <returns>结果条件对象(SQL条件和参数)</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert``1(Agebull.EntityModel.Common.IParameterCreater,Agebull.EntityModel.Common.DataAccessOption,Agebull.EntityModel.Common.LambdaItem{``0})">
            <summary>
                分析Lambda表达式
            </summary>
            <typeparam name="T">方法类型</typeparam>
            <param name="parameter"></param>
            <param name="option">设置</param>
            <param name="filter">Lambda表达式</param>
            <returns>结果条件对象(SQL条件和参数)</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert``1(Agebull.EntityModel.Common.IParameterCreater,Agebull.EntityModel.Common.DataAccessOption,Agebull.EntityModel.Common.LambdaItem{``0},Agebull.EntityModel.Common.ConditionItem,System.Boolean)">
            <summary>
                分析Lambda表达式
            </summary>
            <typeparam name="T">方法类型</typeparam>
            <param name="parameter"></param>
            <param name="option">设置</param>
            <param name="filter">Lambda表达式</param>
            <param name="condition">之前已解析的条件,可为空</param>
            <param name="mergeByAnd">与前面的条件(condition中已存在的)是用与还是或组合</param>
            <returns>结果条件对象(SQL条件和参数)</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert``1(System.Linq.Expressions.Expression{``0})">
            <summary>
                分析Lambda表达式
            </summary>
            <typeparam name="T">方法类型</typeparam>
            <param name="predicate">Lambda表达式</param>
            <returns>结果条件对象(SQL条件和参数)</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.ConvertExpression(System.Linq.Expressions.Expression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert(System.Linq.Expressions.BinaryExpression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">二元Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert(System.Linq.Expressions.UnaryExpression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">一元Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">方法Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert(System.Linq.Expressions.MemberExpression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">属性或字段Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.Convert(System.Linq.Expressions.ConstantExpression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">常量Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.GetArgument(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
                取得方法对象的参数
            </summary>
            <param name="arguments">方法Lambda对象</param>
            <returns>参数文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.GetArguments(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
                取得方法对象的参数
            </summary>
            <param name="arguments">方法Lambda对象</param>
            <returns>参数文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.GetName(System.Linq.Expressions.MemberExpression)">
            <summary>
                取得名称
            </summary>
            <param name="expression">字段或属性对象</param>
            <returns>名称</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.GetValue``1(System.Linq.Expressions.Expression)">
            <summary>
                取得值
            </summary>
            <param name="expression">Lambda节点对象</param>
            <returns>计算结果值</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.GetField(System.Linq.Expressions.Expression)">
            <summary>
                取得值
            </summary>
            <param name="expression">Lambda节点对象</param>
            <returns>计算结果值</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.TryGetField(System.Linq.Expressions.Expression,System.String@)">
            <summary>
                取得字段
            </summary>
            <param name="expression">Lambda节点对象</param>
            <param name="field">字段</param>
            <returns>计算结果值</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.GetField(System.Linq.Expressions.MemberExpression)">
            <summary>
                取得值
            </summary>
            <param name="member">Lambda节点对象</param>
            <returns>计算结果值</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.ExpressionSql(System.Linq.Expressions.Expression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.ExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
                转换表达式
            </summary>
            <param name="expression">Lambda对象</param>
            <returns>解释后的SQL文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.GetValue(System.Linq.Expressions.Expression)">
            <summary>
                取得值
            </summary>
            <param name="expression">Lambda节点对象</param>
            <returns>计算结果值</returns>
        </member>
        <member name="M:Agebull.EntityModel.MySql.PredicateConvert.CheckSingle(System.String)">
            <summary>
                不成文的表达式处理
            </summary>
            <param name="str">有可能不合格的SQL文本</param>
            <returns>正确合格的SQL文本</returns>
        </member>
    </members>
</doc>
